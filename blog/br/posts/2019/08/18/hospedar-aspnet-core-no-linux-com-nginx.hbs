{{#> blog/layout
  title="Hospedar ASP.NET Core no Linux com Nginx"
  description="Este é um guia passo a passo de como configurar o Nginx no Ubuntu Server para executar uma única ASP.NET Core API ou múltiplas ASP.NET Core APIs em um domínio (sem subdomínio)."
  path="posts/2019/08/18/host-aspnet-core-on-linux-with-nginx.html"
  image="posts/2019/08/18/cover.png"
  disqus="2019/08/18/host-aspnet-core-on-linux-with-nginx.html"
  original="/posts/2019/08/18/host-aspnet-core-on-linux-with-nginx.html"
}}

{{#*inline "body-block"}}
<small>18 de agosto de 2019</small>

<h1>
  Hospedar ASP.NET Core no Linux com Nginx
</h1>

<img src="/posts/2019/08/18/cover.png">

<p>
  Este é um guia passo a passo de como configurar o Nginx no Ubuntu Server para executar
  uma única ASP.NET Core API ou múltiplas ASP.NET Core APIs em um domínio (sem subdomínio).
</p>

<p>
  Esse post é bem extenso então vamos dividí-lo em etapas para alcançar isso:
  <ol>
    <li>
      <a href="#instalar-o-nginx">
        Instalar o Nginx
      </a>
    </li>
    <li>
      <a href="#configurar-o-firewall">
        Configurar o firewall
      </a>
    </li>
    <li>
      <a href="#configurar-o-nginx">
        Configurar o Nginx
      </a>
    </li>
    <li>
      <a href="#criar-um-server-block-para-o-dominio">
        Criar um <i>server block</i> para o domínio
      </a>
    </li>
    <li>
      <a href="#configurar-a-aspnet-core-api">
        Configurar a ASP.NET Core API
      </a>
      <ol>
        <li>
          <a href="#configurar-a-aspnet-core-api-como-um-servico">
            Configurar a ASP.NET Core API como um serviço
          </a>
        </li>
        <li>
          <a href="#configurar-uma-unica-aspnet-core-api-no-dominio">
            Configurar uma única ASP.NET Core API no domínio
          </a>
        </li>
        <li>
          <a href="#configurar-multiplas-aspnet-core-api-em-um-dominio">
            Configurar múltiplas ASP.NET Core APIs em um domínio
          </a>
        </li>
      </ol>
    </li>
  </ol>
</p>

<h2 id="instalar-o-nginx">
  1. Instalar o Nginx
  <a href="#instalar-o-nginx"></a>
</h2>

<p>
  Primeiro precisamos do Nginx instalado no servidor.
  Nós podemos usar o <code>apt-get</code> para instalar.
</p>

<p>
  <pre><code>sudo apt-get install nginx</code></pre>
</p>

<p>
  Depois da instalação o servidor já deve está executando.
  Para checar o <i>status</i> do Nginx execute o seguinte comando:
</p>

<p>
  <pre><code>sudo systemctl status nginx</code></pre>
</p>

<h2 id="configurar-o-firewall">
  2. Configurar o firewall
  <a href="#configurar-o-firewall"></a>
</h2>

<p>
  Após instalar o Nginx pode ser preciso abrir as portas HTTP e HTTPS no firewall.
  Se você está usando o Amazon EC2 (assim como eu) apenas use o console da AWS
  (<i>AWS Management Console</i>) para fazer isso e você estará pronto para ir
  para o <a href="#configurar-o-nginx">próximo tópico</a>.
</p>

<p>
  Vamos listar as configurações de aplicação que o <code>ufw</code> conhece:
</p>

<p>
  <pre><code>sudo ufw app list</code></pre>
</p>

<p>
  Existem três perfis disponíveis para o Nginx abrir as portas 80 (HTTP) e 443 (HTTPS):
  <ul>
    <li>
      <b>Nginx Full:</b> Esse perfil abri ambas as portas 80 e 443.
    </li>
    <li>
      <b>Nginx HTTP:</b> Esse perfil abri somente a porta 80.
    </li>
    <li>
      <b>Nginx HTTPS:</b> Esse perfil abri somente a porta 443.
    </li>
  </ul>
</p>

<p>
  Vamos executar o seguinte comando para habilitar o perfil <b>Nginx Full</b>.
</p>

<p>
  <pre><code>sudo ufw allow 'Nginx Full'</code></pre>
</p>

<p>
  Agora vamos executar o seguinte comando para verificar a alteração:
</p>

<p>
  <pre><code>sudo ufw status</code></pre>
</p>

<h2 id="configurar-o-nginx">
  3. Configurar o Nginx
  <a href="#configurar-o-nginx"></a>
</h2>

<p>
  A configuração a seguir é a que eu estou usando e deve ser o suficiente para iniciar.
  Caso você esteja interessado no detalhes, a <a href="https://nginx.org/en/docs/">documentação do Nginx</a>
  é um bom lugar para referência e também <a href="https://devdocs.io/nginx/">devdocs.io/nginx</a>.
</p>

<p>
  Crie o arquivo de configuração <code>/etc/nginx/proxy.config</code> com o conteúdo:
</p>

<p>
  <pre><code>{{ include 'blog/posts/2019/08/18/_proxy.config' }}</code></pre>
</p>

<p>
  Modifique o arquivo <code>/etc/nginx/nginx.config</code> e substitua com o seguinte conteúdo:
</p>

<p>
  <pre><code>{{ include 'blog/posts/2019/08/18/_nginx.config' }}</code></pre>
</p>

<p>
  Edite o <i>server block</i> padrão para tratar <code>server_name</code> desconhecido
  retornando o <i>status code</i> 444 (conexão fechada sem resposta &mdash; <i>connection closed without response</i>).
  Modifique o <i>server block</i> padrão do Nginx <code>/etc/nginx/sites-available/default</code>
  e substitua com o seguinte conteúdo:
</p>

<p>
  <pre><code>{{ include 'blog/posts/2019/08/18/_sites-available-default' }}</code></pre>
</p>

<p>
  Teste a configuração do Nginx para verificar se a sintaxe está correta:
</p>

<p>
  <pre><code>sudo nginx -t</code></pre>
</p>

<p>
  Se não houver erros, reinicie o Nginx.
</p>

<p>
  <pre><code>sudo systemctl restart nginx</code></pre>
</p>

<h2 id="criar-um-server-block-para-o-dominio">
  4. Crie um <i>server block</i> para o domínio
  <a href="#criar-um-server-block-para-o-dominio"></a>
</h2>

<p>
  Primeiro vamos criar uma pasta para o domínio (ex.: example.com) dentro do diretório <code>/var/www</code>
  usando a flag <code>-p</code> para criar os diretórios pais se necessário:
</p>

<p>
  <pre><code>sudo mkdir -p /var/www/example.com</code></pre>
</p>

<p>
  Em seguida, para evitar qualquer problema de permissão, torne o usuário do Nginx <code>www-data</code>
  proprietário do diretório que acabamos de criar:
</p>

<p>
  <pre><code>sudo chown -R www-data: /var/www/example.com</code></pre>
</p>

<p>
  Permita o proprietário e grupos para escrever no diretório:
</p>

<p>
  <pre><code>sudo chmod -R 775 /var/www/example.com</code></pre>
</p>

<p>
  Adicione outro usuário para o grupo <code>www-data</code> caso precise
  (o usuário ubuntu da Amazon EC2, por exemplo):
</p>

<p>
  <pre><code>sudo usermod -a -G www-data ubuntu</code></pre>
</p>

<p>
  Agora vamos criar o <i>server block</i> (um arquivo de configuração)
  <code>/etc/nginx/sites-available/example.com</code> com o seguinte conteúdo:
</p>

<p>
  <pre><code>{{ include 'blog/posts/2019/08/18/_sites-available-example.com' }}</code></pre>
</p>

<p>
  Para habilitar o novo <i>server block</i> é necessário criar um link simbólico partindo do arquivo no
  diretório <code>sites-available</code> para o diretório <code>sites-enabled</code>, o qual é lido pelo Nginx
  quando é iniciado:
</p>

<p>
  <pre><code>sudo ln -sfn /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/</code></pre>
</p>

<p>
  Então teste a sintaxe da configuração e reinicie o Nginx:
</p>

<p>
  <pre><code>sudo nginx -t</code></pre>
  <pre><code>sudo systemctl restart nginx</code></pre>
</p>

<p>
  Agora você deve obter o texto "OK" quando acessar http://example.com no seu navegador.
</p>

<h2 id="configurar-a-aspnet-core-api">
  5. Configurar a ASP.NET Core API
  <a href="#configurar-a-aspnet-core-api"></a>
</h2>

<p>
  Basicamente nós precisamos configurar a ASP.NET Core API como um serviço e configurar o Nginx como um proxy reverso.
  A <a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx">documentação da Microsoft</a>
  me ajudou muito.
</p>

<p>
  Durante esse processo os seguintes arquivos serão criados ou editados:
</p>

<p>
  <ul>
      <code>/etc/systemd/system/my-example-api.service:</code> Arquivo de configuração do serviço
      para a ASP.NET Core API.
    </li>
    <li>
      <code>/etc/nginx/proxy.config:</code> Arquivo de configuração do proxy.
    </li>
    <li>
      <code>/etc/nginx/nginx.config:</code> Arquivo de configuração do Nginx.
    </li>
    <li>
      <code>/etc/nginx/sites-available/default:</code> <i>Server block</i> padrão.
    </li>
    <li>
      <code>/etc/nginx/sites-available/example.com:</code> <i>Server block</i> do domínio.
    </li>
  </ul>
</p>

<h3 id="configurar-a-aspnet-core-api-como-um-servico">
  5.1. Configurar a ASP.NET Core API como um serviço
</h3>

<p>
  Nginx não é configurado para gerenciar processos do Kestrel. Por isso, vamos utilizar o <code>systemd</code>
  para criar um arquivo de configuração do serviço para comandar (iniciar, parar, reiniciar) e monitorar a API.
</p>

<p>
  Crie um arquivo de configuraração para o serviço:
</p>

<p>
  <pre><code>sudo vim /etc/systemd/system/my-example-api.service</code></pre>
</p>

<p>
  A seguir está um exemplo de arquivo de configuração do serviço para <i>My Example API</i>
  (se necessário, altere para atender o seu caso de uso):
</p>

<p>
  <pre><code>{{ include 'blog/posts/2019/08/18/_my-example-api.service' }}</code></pre>
</p>

<p>
  Inicie o serviço e verifique que está executando.
</p>

<p>
  <pre><code>sudo systemctl start my-example-api.service</code></pre>
  <pre><code>sudo systemctl status my-example-api.service</code></pre>
</p>

<p>
  Uma vez que a API que está sendo executada no Kestrel é gerenciada pelo <code>systemd</code>, todos os eventos
  e processos são logados para o <i>journal</i> (um componente do <code>systemd</code>). Para visualizar os
  registros do serviço do API <code>my-example-api.service</code>, use o seguinte comando:
</p>

<p>
  <pre><code>sudo journalctl -fu my-example-api.service</code></pre>
</p>

<p>
  Para filtrar por período e reduzir o número de registros retornados:
</p>

<p>
  <pre><code>sudo journalctl -fu my-example-api.service --since "2019-01-01" --until "2019-01-20 06:00"</code></pre>
</p>

<h3 id="configurar-uma-unica-aspnet-core-api-no-dominio">
  5.2. Configuar uma única ASPI.NET Core API no domínio
</h3>

<p>
  É necessário configurar o Nginx como um proxy reverso para encaminhar requisições feitas de http://example.com
  para a ASP.NET Core API executandp no Kestrel em http://localhost:5000. Modifique o <i>server block</i>
  <code>/etc/nginx/sites-available/example.com</code> e substitua o conteúdo com o seguinte:
</p>

<p>
  <pre><code>{{ include 'blog/posts/2019/08/18/_sites-available-example.com-single' }}</code></pre>
</p>

<p>
  Então teste a sintaxe da configuração e reinicie o Nginx:
</p>

<p>
  <pre><code>sudo nginx -t</code></pre>
  <pre><code>sudo systemctl restart nginx</code></pre>
</p>

<p>
  A API estará disponível em http://example.com.
</p>

<h3 id="configurar-multiplas-aspnet-core-api-em-um-dominio">
  5.3. Configurar múltiplas ASP.NET Core APIs em um domínio
</h3>

<p>
  Nós iremos configurar o Nginx como um proxy reverso para encaminhar as requisições de várias ASP.NET Core APIs
  usando a diretiva <code>rewrite</code>. Modifique <code>/etc/nginx/sites-available/example.com</code> e substitua
  o conteúdo com o seguinte:
</p>

<p>
  <pre><code>{{ include 'blog/posts/2019/08/18/_sites-available-example.com-multiple' }}</code></pre>
</p>

<p>
  Você precisará ter um arquivo de configuração para cada API para executar ambas as APIs como um serviço.
  Apenas repita <a href="#configurar-a-aspnet-core-api-como-um-servico">o passo já descrito neste post</a>
  prestando atenção nos caminhos e na porta usada.
</p>

<p>
  Então teste a sintaxe da configuração e reinicie o Nginx:
</p>

<p>
  <pre><code>sudo nginx -t</code></pre>
  <pre><code>sudo systemctl restart nginx</code></pre>
</p>

<p>
  Agora ambas as APIs <code>myapi1</code> e <code>myapi2</code> estarão disponíveis no mesmo servidor em
  http://example.com/myapi1 e http://example.com/myapi2 respectivamente.
</p>
{{/inline}}

{{/blog/layout}}
