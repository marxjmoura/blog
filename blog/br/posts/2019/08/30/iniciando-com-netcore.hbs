{{#> blog/page
  lang="pt"
  title="Iniciando com .NET Core"
  description="Vamos configurar nosso ambiente de desenvolvimento e construir uma RESTful API usando ASP.NET Core MVC com Entity Framework Core e xUnit para escrever testes automatizados."
  image="posts/2019/08/30/cover.png"
  path="br/posts/2019/08/30/iniciando-com-netcore.html"
  original="posts/2019/08/30/get-started-with-netcore.html"
  disqus="2019/08/30/get-started-with-netcore"
}}

{{#*inline "body-block"}}
<small>
  30 de agosto de 2019
</small>

<h1>
  Iniciando com .NET Core
</h1>

<figure>
  <img src="/posts/2019/08/30/cover.svg" alt=".NET Core play">
</figure>

<p>
  Vamos configurar nosso ambiente de desenvolvimento e construir uma RESTful API usando
  <a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/overview">ASP.NET Core MVC</a> com
  <a href="https://docs.microsoft.com/en-us/ef/core/">Entity Framework Core</a> e
  <a href="https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-dotnet-test">xUnit</a>
  para escrever testes automatizados.
</p>

<p>
  Para configurar o ambiente de desenvolvimento nós seguiremos alguns passos.
  Eu estou usando o sistema Ubuntu mas você pode seguir a mesma sequência no Windows.

  <ol>
    <li>
      <a href="#instalar-o-netcore-sdk">Instalar o .NET Core SDK</a>
    </li>
    <li>
      <a href="#instalar-o-vscode">Instalar o VS Code</a>
    </li>
    <li>
      <a href="#instalar-o-postgresql">Instalar o PostgreSQL</a>
    </li>
    <li>
      <a href="#criar-um-projeto">Criar um projeto</a>
    </li>
  </ol>
</p>

<h2 id="instalar-o-netcore-sdk">
  1. Instalar o .NET Core SDK
  <a href="#instalar-o-netcore-sdk"></a>
</h2>

<p>
  Para instalar o .NET Core SDK no Ubuntu você pode consultar o
  <a href="/br/posts/2019/08/29/instalar-netcore-sdk-no-ubuntu.html">post</a>
  que escrevi para fazer isso com alguns comandos.
  Mas eu também sugiro que você leia as instruções da Microsoft para o Linux na
  <a href="https://dotnet.microsoft.com/download">página de download</a>.
</p>

<p>
  Se você estiver usando o Windows você pode baixar o instalador e seguir as instruções durante a instalação.
</p>

<h2 id="instalar-o-vscode">
  2. Instalar o VS Code
  <a href="#instalar-o-vscode"></a>
</h2>

<p>
  O <a href="https://code.visualstudio.com">VS Code</a> é um editor de código leve,
  gratuito e <a href="https://github.com/microsoft/vscode">código aberto</a>. Uma excelente ferramenta!
  Mas existem outras opções como <a href="https://visualstudio.microsoft.com">Visual Studio</a>
  e <a href="https://www.monodevelop.com">MonoDevelop</a>.
</p>

<p>
  Se você quiser usar o VS Code (assim como eu) é só <a href="https://code.visualstudio.com/download">baixar</a> e
  instalar. Em seguida, abra o VS Code, clique na aba <code>Extensions</code> (Extensões) e instale essas duas
  extensões: <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.csharp">C#</a> e
  <a href="https://marketplace.visualstudio.com/items?itemName=jchannon.csharpextensions">C# Extensions</a>
  (use a barra de pesquisa para encontrá-las).
</p>

<h2 id="instalar-o-postgresql">
  3. Instalar o PostgreSQL
  <a href="#instalar-o-postgresql"></a>
</h2>

<p>
  Para persistir os dados da aplicação nós usaremos um banco de dados relacional. Neste guia nós usaremos o
  banco de dados <a href="https://www.postgresql.org/">PostgreSQL</a>. Existem outros banco de dados como
  <a href="https://www.microsoft.com/en-us/sql-server/sql-server-downloads/">SQL Server</a>,
  <a href="https://www.oracle.com/database/">Oracle</a>, <a href="https://www.mysql.com/">My SQL</a> e
  <a href="https://mariadb.org/">MariaDB</a>.
  Também existem o bancos de dados não relacionais como <a href="https://www.mongodb.com/">MongoDB</a>,
  <a href="https://aws.amazon.com/dynamodb/">Amazon DynamoDB</a> e
  <a href="https://firebase.google.com/products/firestore/">Google Cloud Firestore</a> que você pode explorar.
</p>

<p>
  Eu escreverei sobre como podemos instalar, gerenciar e otimizar o PostgreSQL para a configuração de hardware e,
  assim que fizer, atualizarei este post. Por enquanto eu somente vou recomendar esse ótimo artigo da Digital Ocean:
  <a href="https://www.digitalocean.com/community/tutorials/how-to-instalar-o-and-use-postgresql-on-ubuntu-18-04">
    <i>How to install and use PostgreSQL on Ubuntu 18.04</i></a>.
</p>

<h2 id="criar-um-projeto">
  4. Criar um projeto
  <a href="#criar-um-projeto"></a>
</h2>

<p>
  Para criar e gerenciar o projeto nós usaremos as ferramentos do
  <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/">.NET Core CLI</a>.
  Os seguintes conteúdos poderão ser discutidos a medida que desenvolvemos nossa RESTful API:

  <ul>
    <li>
      <b>MVC (Model-View-Controller)</b>:
      Esse padrão nos ajudará a separar responsabilidades em camadas lógicas. O
      <a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/overview">ASP.NET Core MVC</a>
      é um framework baseado nesse padrão.
    </li>
    <li>
      <b>DI e IoC</b>:
      Injeção de dependência (DI, <i>Dependency Injection</i>) e inversão de controle
      (IoC - <i>Inversion of Control</i>) são padrões que usaremos para reduzir o acoplamento e tornar nosso código mais
      testável. O framework <a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/overview">ASP.NET Core MVC</a>
      já possui nativamente um container IoC e nós veremos como ele funciona.
    </li>
    <li>
      <b>ORM (Object-relational mapping)</b>:
      Nós usaremos o framework ORM <a href="https://docs.microsoft.com/en-us/ef/core/">Entity Framework Core</a>
      para reduzir o acoplamento com tecnologias de banco de dados e acelerar o desenvolvimento eliminando a
      necessidade de escrever códigos SQL repetidamente para operações de CRUD.
    </li>
    <li>
      <b>Testes automatizados</b>:
      Ao invés de conduzir testes manualmente, nós iremos escrever testes automatizados com o
      <a href="https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-dotnet-test">xUnit</a>.
      Assim, nós poderemos testar novas e antigas funcionalidades (teste de regressão) de maneira eficiente.
    </li>
    <li>
      <b>Escrita de código</b>:
      Nós dedicaremos alguma atenção para tornar nosso código legível e navegável com estrutura de arquivos organizada,
      semântica correta e indentação adequada.
    </li>
  </ul>
</p>

<p>
  Vamos continuar este tópico em outro post e ver como podemos criar nosso
  <a href="/br/posts/2019/09/03/primeiro-projeto-netcore-usando-cli.html">primeiro projeto .NET Core usando a CLI</a>.
</p>

{{/inline}}

{{/blog/page}}
